<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbcPerfil.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>